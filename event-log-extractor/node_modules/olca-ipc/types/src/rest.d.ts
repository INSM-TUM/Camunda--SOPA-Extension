import * as o from "./schema.js";
import * as protocol from "./protocol.js";
type HttpMethod = "GET" | "POST" | "PUT" | "DELETE";
export declare class RestClient implements protocol.Client {
    private readonly base;
    constructor(base: string);
    static on(portOrEndpoint: string | number): RestClient;
    get(refType: o.RefType, q: string | Record<string, string>): Promise<o.RootEntity | null>;
    getAll(refType: o.RefType): Promise<o.RootEntity[]>;
    getDescriptors(refType: o.RefType): Promise<o.Ref[]>;
    getDescriptor(refType: o.RefType, q: string | Record<string, string>): Promise<o.Ref | null>;
    getProviders(flow?: o.Ref): Promise<o.TechFlow[]>;
    getParameters(type: o.RefType, id: string): Promise<Array<o.Parameter | o.ParameterRedef>>;
    put(model: o.RootEntity): Promise<o.Ref>;
    createProductSystem(process: o.Ref | o.Process, config?: o.LinkingConfig): Promise<o.Ref | null>;
    delete(model: o.Ref | o.RootEntity): Promise<o.Ref | null>;
    calculate(setup: o.CalculationSetup): Promise<RestResult>;
    simulate(setup: o.CalculationSetup): Promise<RestResult>;
    _callEach<T>(path: string, fn: (resp: any) => T | null, method?: HttpMethod, body?: Record<string, any>): Promise<protocol.Response<T[]>>;
    _call<T>(path: string, fn: (resp: any) => T | null, method?: HttpMethod, body?: Record<string, any>): Promise<protocol.Response<T>>;
}
export declare class RestResult implements protocol.Result {
    private readonly client;
    private readonly id;
    private error?;
    constructor(client: RestClient, state: o.ResultState);
    getState(): Promise<o.ResultState>;
    simulateNext(): Promise<o.ResultState>;
    dispose(): Promise<void>;
    private nextState;
    untilReady(pollTime?: number): Promise<o.ResultState>;
    private path;
    getDemand(): Promise<o.TechFlowValue>;
    getTechFlows(): Promise<o.TechFlow[]>;
    getEnviFlows(): Promise<o.EnviFlow[]>;
    getImpactCategories(): Promise<o.Ref[]>;
    getScalingFactors(): Promise<o.TechFlowValue[]>;
    getTotalRequirements(): Promise<o.TechFlowValue[]>;
    getTotalRequirementsOf(techFlow: o.TechFlow): Promise<o.TechFlowValue>;
    getScaledTechFlowsOf(techFlow: o.TechFlow): Promise<o.TechFlowValue[]>;
    getUnscaledTechFlowsOf(techFlow: o.TechFlow): Promise<o.TechFlowValue[]>;
    getTotalFlows(): Promise<o.EnviFlowValue[]>;
    getTotalFlowValueOf(enviFlow: o.EnviFlow): Promise<o.EnviFlowValue>;
    getFlowContributionsOf(enviFlow: o.EnviFlow): Promise<o.TechFlowValue[]>;
    getDirectInterventionsOf(techFlow: o.TechFlow): Promise<o.EnviFlowValue[]>;
    getDirectInterventionOf(enviFlow: o.EnviFlow, techFlow: o.TechFlow): Promise<o.EnviFlowValue>;
    getFlowIntensitiesOf(techFlow: o.TechFlow): Promise<o.EnviFlowValue[]>;
    getFlowIntensityOf(enviFlow: o.EnviFlow, techFlow: o.TechFlow): Promise<o.EnviFlowValue>;
    getTotalInterventionsOf(techFlow: o.TechFlow): Promise<o.EnviFlowValue[]>;
    getTotalInterventionOf(enviFlow: o.EnviFlow, techFlow: o.TechFlow): Promise<o.EnviFlowValue>;
    getUpstreamInterventionsOf(enviFlow: o.EnviFlow, path?: o.TechFlow[]): Promise<o.UpstreamNode[]>;
    getTotalImpacts(): Promise<o.ImpactValue[]>;
    getNormalizedImpacts(): Promise<o.ImpactValue[]>;
    getWeightedImpacts(): Promise<o.ImpactValue[]>;
    getTotalImpactValueOf(impactCategory: o.Ref): Promise<o.ImpactValue>;
    getImpactContributionsOf(impactCategory: o.Ref): Promise<o.TechFlowValue[]>;
    getDirectImpactsOf(techFlow: o.TechFlow): Promise<o.ImpactValue[]>;
    getDirectImpactOf(impactCategory: o.Ref, techFlow: o.TechFlow): Promise<o.ImpactValue>;
    getImpactIntensitiesOf(techFlow: o.TechFlow): Promise<o.ImpactValue[]>;
    getImpactIntensityOf(impactCategory: o.Ref, techFlow: o.TechFlow): Promise<o.ImpactValue>;
    getTotalImpactsOf(techFlow: o.TechFlow): Promise<o.ImpactValue[]>;
    getTotalImpactOf(impactCategory: o.Ref, techFlow: o.TechFlow): Promise<o.ImpactValue>;
    getImpactFactorsOf(impactCategory: o.Ref): Promise<o.EnviFlowValue[]>;
    getImpactFactorOf(impactCategory: o.Ref, enviFlow: o.EnviFlow): Promise<o.ImpactValue>;
    getFlowImpactsOf(impactCategory: o.Ref): Promise<o.EnviFlowValue[]>;
    getFlowImpactOf(impactCategory: o.Ref, enviFlow: o.EnviFlow): Promise<o.ImpactValue>;
    getUpstreamImpactsOf(impactCategory: o.Ref, path?: o.TechFlow[]): Promise<o.UpstreamNode[]>;
    getTotalCosts(): Promise<o.CostValue>;
    getCostContributions(): Promise<o.TechFlowValue[]>;
    getDirectCostsOf(techFlow: o.TechFlow): Promise<o.CostValue>;
    getCostIntensitiesOf(techFlow: o.TechFlow): Promise<o.CostValue>;
    getTotalCostsOf(techFlow: o.TechFlow): Promise<o.CostValue>;
    getUpstreamCostsOf(path?: o.TechFlow[]): Promise<o.UpstreamNode[]>;
    getSankeyGraph(config: o.SankeyRequest): Promise<o.SankeyGraph>;
}
export {};
