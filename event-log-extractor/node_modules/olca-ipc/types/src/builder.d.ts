import * as o from "./schema.js";
type Ref<T extends o.RefEntity> = T | o.Ref;
type Num = number | string;
export declare function uuid(): string;
export declare function createUnit(name: string, conversionFactor?: number): o.Unit;
export declare function createUnitGroup(name: string, refUnit: string | o.Unit): o.UnitGroup;
export declare function createFlowProperty(name: string, unitGroup: Ref<o.UnitGroup>): o.FlowProperty;
export declare function createProduct(name: string, property: Ref<o.FlowProperty>): o.Flow;
export declare function createWaste(name: string, property: Ref<o.FlowProperty>): o.Flow;
export declare function createElementaryFlow(name: string, property: Ref<o.FlowProperty>): o.Flow;
export declare function createProcess(name: string, refFlow?: Ref<o.Flow>): o.Process;
export declare function createInput(process: o.Process, flow: Ref<o.Flow>, amount?: Num, unit?: Ref<o.Unit>): o.Exchange;
export declare function createOutput(process: o.Process, flow: Ref<o.Flow>, amount?: Num, unit?: Ref<o.Unit>): o.Exchange;
export declare function createPhysicalAllocationFactor(process: o.Process, product: Ref<o.Flow>, value: Num): o.AllocationFactor;
export declare function createEconomicAllocationFactor(process: o.Process, product: Ref<o.Flow>, value: Num): o.AllocationFactor;
export declare function createCausalAllocationFactor(process: o.Process, product: Ref<o.Flow>, value: Num, exchange: o.Exchange | o.ExchangeRef): o.AllocationFactor;
export declare function createLocation(name: string, code?: string): o.Location;
export declare function createParameter(name: string, value: Num, scope?: o.ParameterScope): o.Parameter;
export declare function createImpactCategory(name: string, refUnit?: string): o.ImpactCategory;
export declare function createImpactFactor(indicator: o.ImpactCategory, flow: Ref<o.Flow>, value: Num, unit?: Ref<o.Unit>): o.ImpactFactor;
export declare function createImpactMethod(name: string, indicators?: Ref<o.ImpactCategory>[]): o.ImpactMethod;
export {};
