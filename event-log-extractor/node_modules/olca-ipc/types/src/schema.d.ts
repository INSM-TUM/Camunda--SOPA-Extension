type Dict = Record<string, unknown>;
export declare enum RefType {
    Actor = "Actor",
    Currency = "Currency",
    DQSystem = "DQSystem",
    Epd = "Epd",
    Flow = "Flow",
    FlowMap = "FlowMap",
    FlowProperty = "FlowProperty",
    ImpactCategory = "ImpactCategory",
    ImpactMethod = "ImpactMethod",
    Location = "Location",
    NwSet = "NwSet",
    Parameter = "Parameter",
    Process = "Process",
    ProductSystem = "ProductSystem",
    Project = "Project",
    Result = "Result",
    SocialIndicator = "SocialIndicator",
    Source = "Source",
    Unit = "Unit",
    UnitGroup = "UnitGroup"
}
export type RootEntity = Actor | Currency | DQSystem | Epd | Flow | FlowMap | FlowProperty | ImpactCategory | ImpactMethod | Location | Parameter | Process | ProductSystem | Project | Result | SocialIndicator | Source | UnitGroup;
export type RefEntity = RootEntity | NwSet | Unit;
export declare enum AllocationType {
    PHYSICAL_ALLOCATION = "PHYSICAL_ALLOCATION",
    ECONOMIC_ALLOCATION = "ECONOMIC_ALLOCATION",
    CAUSAL_ALLOCATION = "CAUSAL_ALLOCATION",
    USE_DEFAULT_ALLOCATION = "USE_DEFAULT_ALLOCATION",
    NO_ALLOCATION = "NO_ALLOCATION"
}
export declare enum Direction {
    INPUT = "INPUT",
    OUTPUT = "OUTPUT"
}
export declare enum EpdType {
    GENERIC_DATASET = "GENERIC_DATASET",
    REPRESENTATIVE_DATASET = "REPRESENTATIVE_DATASET",
    AVERAGE_DATASET = "AVERAGE_DATASET",
    SPECIFIC_DATASET = "SPECIFIC_DATASET",
    TEMPLATE_DATASET = "TEMPLATE_DATASET"
}
export declare enum FlowPropertyType {
    ECONOMIC_QUANTITY = "ECONOMIC_QUANTITY",
    PHYSICAL_QUANTITY = "PHYSICAL_QUANTITY"
}
export declare enum FlowType {
    ELEMENTARY_FLOW = "ELEMENTARY_FLOW",
    PRODUCT_FLOW = "PRODUCT_FLOW",
    WASTE_FLOW = "WASTE_FLOW"
}
export declare enum ModelType {
    ACTOR = "ACTOR",
    CATEGORY = "CATEGORY",
    CURRENCY = "CURRENCY",
    DQ_SYSTEM = "DQ_SYSTEM",
    EPD = "EPD",
    FLOW = "FLOW",
    FLOW_PROPERTY = "FLOW_PROPERTY",
    IMPACT_CATEGORY = "IMPACT_CATEGORY",
    IMPACT_METHOD = "IMPACT_METHOD",
    LOCATION = "LOCATION",
    PARAMETER = "PARAMETER",
    PROCESS = "PROCESS",
    PRODUCT_SYSTEM = "PRODUCT_SYSTEM",
    PROJECT = "PROJECT",
    RESULT = "RESULT",
    SOCIAL_INDICATOR = "SOCIAL_INDICATOR",
    SOURCE = "SOURCE",
    UNIT_GROUP = "UNIT_GROUP"
}
export declare enum ParameterScope {
    PROCESS_SCOPE = "PROCESS_SCOPE",
    IMPACT_SCOPE = "IMPACT_SCOPE",
    GLOBAL_SCOPE = "GLOBAL_SCOPE"
}
export declare enum ProcessType {
    LCI_RESULT = "LCI_RESULT",
    UNIT_PROCESS = "UNIT_PROCESS"
}
export declare enum ProviderLinking {
    IGNORE_DEFAULTS = "IGNORE_DEFAULTS",
    PREFER_DEFAULTS = "PREFER_DEFAULTS",
    ONLY_DEFAULTS = "ONLY_DEFAULTS"
}
export declare enum RiskLevel {
    NO_OPPORTUNITY = "NO_OPPORTUNITY",
    HIGH_OPPORTUNITY = "HIGH_OPPORTUNITY",
    MEDIUM_OPPORTUNITY = "MEDIUM_OPPORTUNITY",
    LOW_OPPORTUNITY = "LOW_OPPORTUNITY",
    NO_RISK = "NO_RISK",
    VERY_LOW_RISK = "VERY_LOW_RISK",
    LOW_RISK = "LOW_RISK",
    MEDIUM_RISK = "MEDIUM_RISK",
    HIGH_RISK = "HIGH_RISK",
    VERY_HIGH_RISK = "VERY_HIGH_RISK",
    NO_DATA = "NO_DATA",
    NOT_APPLICABLE = "NOT_APPLICABLE"
}
export declare enum UncertaintyType {
    LOG_NORMAL_DISTRIBUTION = "LOG_NORMAL_DISTRIBUTION",
    NORMAL_DISTRIBUTION = "NORMAL_DISTRIBUTION",
    TRIANGLE_DISTRIBUTION = "TRIANGLE_DISTRIBUTION",
    UNIFORM_DISTRIBUTION = "UNIFORM_DISTRIBUTION"
}
interface IActor {
    id?: string | null;
    address?: string | null;
    category?: string | null;
    city?: string | null;
    country?: string | null;
    description?: string | null;
    email?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    telefax?: string | null;
    telephone?: string | null;
    version?: string | null;
    website?: string | null;
    zipCode?: string | null;
}
export declare class Actor {
    id?: string | null;
    address?: string | null;
    category?: string | null;
    city?: string | null;
    country?: string | null;
    description?: string | null;
    email?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    telefax?: string | null;
    telephone?: string | null;
    version?: string | null;
    website?: string | null;
    zipCode?: string | null;
    static of(i: IActor): Actor;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Actor | null;
    static fromJson(json: string | Dict): Actor | null;
    toJson(): string;
}
interface IAllocationFactor {
    allocationType?: AllocationType | null;
    exchange?: ExchangeRef | null;
    formula?: string | null;
    product?: Ref | null;
    value?: number | null;
}
export declare class AllocationFactor {
    allocationType?: AllocationType | null;
    exchange?: ExchangeRef | null;
    formula?: string | null;
    product?: Ref | null;
    value?: number | null;
    static of(i: IAllocationFactor): AllocationFactor;
    toDict(): Dict;
    static fromDict(d: Dict): AllocationFactor | null;
    static fromJson(json: string | Dict): AllocationFactor | null;
    toJson(): string;
}
interface IAspectValue {
    aspect?: string | null;
    value?: string | null;
}
export declare class AspectValue {
    aspect?: string | null;
    value?: string | null;
    static of(i: IAspectValue): AspectValue;
    toDict(): Dict;
    static fromDict(d: Dict): AspectValue | null;
    static fromJson(json: string | Dict): AspectValue | null;
    toJson(): string;
}
interface IComplianceDeclaration {
    aspects?: Array<AspectValue> | null;
    comment?: string | null;
    system?: Ref | null;
}
export declare class ComplianceDeclaration {
    aspects?: Array<AspectValue> | null;
    comment?: string | null;
    system?: Ref | null;
    static of(i: IComplianceDeclaration): ComplianceDeclaration;
    toDict(): Dict;
    static fromDict(d: Dict): ComplianceDeclaration | null;
    static fromJson(json: string | Dict): ComplianceDeclaration | null;
    toJson(): string;
}
interface ICurrency {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    conversionFactor?: number | null;
    description?: string | null;
    lastChange?: string | null;
    name?: string | null;
    refCurrency?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class Currency {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    conversionFactor?: number | null;
    description?: string | null;
    lastChange?: string | null;
    name?: string | null;
    refCurrency?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: ICurrency): Currency;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Currency | null;
    static fromJson(json: string | Dict): Currency | null;
    toJson(): string;
}
interface IDQIndicator {
    name?: string | null;
    position?: number | null;
    scores?: Array<DQScore> | null;
}
export declare class DQIndicator {
    name?: string | null;
    position?: number | null;
    scores?: Array<DQScore> | null;
    static of(i: IDQIndicator): DQIndicator;
    toDict(): Dict;
    static fromDict(d: Dict): DQIndicator | null;
    static fromJson(json: string | Dict): DQIndicator | null;
    toJson(): string;
}
interface IDQScore {
    description?: string | null;
    label?: string | null;
    position?: number | null;
    uncertainty?: number | null;
}
export declare class DQScore {
    description?: string | null;
    label?: string | null;
    position?: number | null;
    uncertainty?: number | null;
    static of(i: IDQScore): DQScore;
    toDict(): Dict;
    static fromDict(d: Dict): DQScore | null;
    static fromJson(json: string | Dict): DQScore | null;
    toJson(): string;
}
interface IDQSystem {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    hasUncertainties?: boolean | null;
    indicators?: Array<DQIndicator> | null;
    lastChange?: string | null;
    name?: string | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class DQSystem {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    hasUncertainties?: boolean | null;
    indicators?: Array<DQIndicator> | null;
    lastChange?: string | null;
    name?: string | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: IDQSystem): DQSystem;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): DQSystem | null;
    static fromJson(json: string | Dict): DQSystem | null;
    toJson(): string;
}
interface IEpd {
    id?: string | null;
    category?: string | null;
    dataGenerator?: Ref | null;
    description?: string | null;
    epdType?: EpdType | null;
    lastChange?: string | null;
    location?: Ref | null;
    manufacturer?: Ref | null;
    manufacturing?: string | null;
    modules?: Array<EpdModule> | null;
    name?: string | null;
    originalEpd?: Ref | null;
    pcr?: Ref | null;
    product?: EpdProduct | null;
    productUsage?: string | null;
    programOperator?: Ref | null;
    registrationId?: string | null;
    tags?: Array<string> | null;
    urn?: string | null;
    useAdvice?: string | null;
    validFrom?: string | null;
    validUntil?: string | null;
    verifier?: Ref | null;
    version?: string | null;
}
export declare class Epd {
    id?: string | null;
    category?: string | null;
    dataGenerator?: Ref | null;
    description?: string | null;
    epdType?: EpdType | null;
    lastChange?: string | null;
    location?: Ref | null;
    manufacturer?: Ref | null;
    manufacturing?: string | null;
    modules?: Array<EpdModule> | null;
    name?: string | null;
    originalEpd?: Ref | null;
    pcr?: Ref | null;
    product?: EpdProduct | null;
    productUsage?: string | null;
    programOperator?: Ref | null;
    registrationId?: string | null;
    tags?: Array<string> | null;
    urn?: string | null;
    useAdvice?: string | null;
    validFrom?: string | null;
    validUntil?: string | null;
    verifier?: Ref | null;
    version?: string | null;
    static of(i: IEpd): Epd;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Epd | null;
    static fromJson(json: string | Dict): Epd | null;
    toJson(): string;
}
interface IEpdModule {
    multiplier?: number | null;
    name?: string | null;
    result?: Ref | null;
}
export declare class EpdModule {
    multiplier?: number | null;
    name?: string | null;
    result?: Ref | null;
    static of(i: IEpdModule): EpdModule;
    toDict(): Dict;
    static fromDict(d: Dict): EpdModule | null;
    static fromJson(json: string | Dict): EpdModule | null;
    toJson(): string;
}
interface IEpdProduct {
    amount?: number | null;
    flow?: Ref | null;
    flowProperty?: Ref | null;
    unit?: Ref | null;
}
export declare class EpdProduct {
    amount?: number | null;
    flow?: Ref | null;
    flowProperty?: Ref | null;
    unit?: Ref | null;
    static of(i: IEpdProduct): EpdProduct;
    toDict(): Dict;
    static fromDict(d: Dict): EpdProduct | null;
    static fromJson(json: string | Dict): EpdProduct | null;
    toJson(): string;
}
interface IExchange {
    amount?: number | null;
    amountFormula?: string | null;
    baseUncertainty?: number | null;
    costFormula?: string | null;
    costValue?: number | null;
    currency?: Ref | null;
    defaultProvider?: Ref | null;
    description?: string | null;
    dqEntry?: string | null;
    flow?: Ref | null;
    flowProperty?: Ref | null;
    internalId?: number | null;
    isAvoidedProduct?: boolean | null;
    isInput?: boolean | null;
    isQuantitativeReference?: boolean | null;
    location?: Ref | null;
    uncertainty?: Uncertainty | null;
    unit?: Ref | null;
}
export declare class Exchange {
    amount?: number | null;
    amountFormula?: string | null;
    baseUncertainty?: number | null;
    costFormula?: string | null;
    costValue?: number | null;
    currency?: Ref | null;
    defaultProvider?: Ref | null;
    description?: string | null;
    dqEntry?: string | null;
    flow?: Ref | null;
    flowProperty?: Ref | null;
    internalId?: number | null;
    isAvoidedProduct?: boolean | null;
    isInput?: boolean | null;
    isQuantitativeReference?: boolean | null;
    location?: Ref | null;
    uncertainty?: Uncertainty | null;
    unit?: Ref | null;
    static of(i: IExchange): Exchange;
    toDict(): Dict;
    static fromDict(d: Dict): Exchange | null;
    static fromJson(json: string | Dict): Exchange | null;
    toJson(): string;
}
interface IExchangeRef {
    internalId?: number | null;
}
export declare class ExchangeRef {
    internalId?: number | null;
    static of(i: IExchangeRef): ExchangeRef;
    toDict(): Dict;
    static fromDict(d: Dict): ExchangeRef | null;
    static fromJson(json: string | Dict): ExchangeRef | null;
    toJson(): string;
}
interface IFlow {
    id?: string | null;
    cas?: string | null;
    category?: string | null;
    description?: string | null;
    flowProperties?: Array<FlowPropertyFactor> | null;
    flowType?: FlowType | null;
    formula?: string | null;
    isInfrastructureFlow?: boolean | null;
    lastChange?: string | null;
    location?: Ref | null;
    name?: string | null;
    synonyms?: string | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class Flow {
    id?: string | null;
    cas?: string | null;
    category?: string | null;
    description?: string | null;
    flowProperties?: Array<FlowPropertyFactor> | null;
    flowType?: FlowType | null;
    formula?: string | null;
    isInfrastructureFlow?: boolean | null;
    lastChange?: string | null;
    location?: Ref | null;
    name?: string | null;
    synonyms?: string | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: IFlow): Flow;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Flow | null;
    static fromJson(json: string | Dict): Flow | null;
    toJson(): string;
}
interface IFlowMap {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    lastChange?: string | null;
    mappings?: Array<FlowMapEntry> | null;
    name?: string | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    target?: Ref | null;
    version?: string | null;
}
export declare class FlowMap {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    lastChange?: string | null;
    mappings?: Array<FlowMapEntry> | null;
    name?: string | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    target?: Ref | null;
    version?: string | null;
    static of(i: IFlowMap): FlowMap;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): FlowMap | null;
    static fromJson(json: string | Dict): FlowMap | null;
    toJson(): string;
}
interface IFlowMapEntry {
    conversionFactor?: number | null;
    from?: FlowMapRef | null;
    to?: FlowMapRef | null;
}
export declare class FlowMapEntry {
    conversionFactor?: number | null;
    from?: FlowMapRef | null;
    to?: FlowMapRef | null;
    static of(i: IFlowMapEntry): FlowMapEntry;
    toDict(): Dict;
    static fromDict(d: Dict): FlowMapEntry | null;
    static fromJson(json: string | Dict): FlowMapEntry | null;
    toJson(): string;
}
interface IFlowMapRef {
    flow?: Ref | null;
    flowProperty?: Ref | null;
    provider?: Ref | null;
    unit?: Ref | null;
}
export declare class FlowMapRef {
    flow?: Ref | null;
    flowProperty?: Ref | null;
    provider?: Ref | null;
    unit?: Ref | null;
    static of(i: IFlowMapRef): FlowMapRef;
    toDict(): Dict;
    static fromDict(d: Dict): FlowMapRef | null;
    static fromJson(json: string | Dict): FlowMapRef | null;
    toJson(): string;
}
interface IFlowProperty {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    flowPropertyType?: FlowPropertyType | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    unitGroup?: Ref | null;
    version?: string | null;
}
export declare class FlowProperty {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    flowPropertyType?: FlowPropertyType | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    unitGroup?: Ref | null;
    version?: string | null;
    static of(i: IFlowProperty): FlowProperty;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): FlowProperty | null;
    static fromJson(json: string | Dict): FlowProperty | null;
    toJson(): string;
}
interface IFlowPropertyFactor {
    conversionFactor?: number | null;
    flowProperty?: Ref | null;
    isRefFlowProperty?: boolean | null;
}
export declare class FlowPropertyFactor {
    conversionFactor?: number | null;
    flowProperty?: Ref | null;
    isRefFlowProperty?: boolean | null;
    static of(i: IFlowPropertyFactor): FlowPropertyFactor;
    toDict(): Dict;
    static fromDict(d: Dict): FlowPropertyFactor | null;
    static fromJson(json: string | Dict): FlowPropertyFactor | null;
    toJson(): string;
}
interface IFlowResult {
    amount?: number | null;
    description?: string | null;
    flow?: Ref | null;
    flowProperty?: Ref | null;
    isInput?: boolean | null;
    isRefFlow?: boolean | null;
    location?: Ref | null;
    unit?: Ref | null;
}
export declare class FlowResult {
    amount?: number | null;
    description?: string | null;
    flow?: Ref | null;
    flowProperty?: Ref | null;
    isInput?: boolean | null;
    isRefFlow?: boolean | null;
    location?: Ref | null;
    unit?: Ref | null;
    static of(i: IFlowResult): FlowResult;
    toDict(): Dict;
    static fromDict(d: Dict): FlowResult | null;
    static fromJson(json: string | Dict): FlowResult | null;
    toJson(): string;
}
interface IImpactCategory {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    description?: string | null;
    direction?: Direction | null;
    impactFactors?: Array<ImpactFactor> | null;
    lastChange?: string | null;
    name?: string | null;
    parameters?: Array<Parameter> | null;
    refUnit?: string | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class ImpactCategory {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    description?: string | null;
    direction?: Direction | null;
    impactFactors?: Array<ImpactFactor> | null;
    lastChange?: string | null;
    name?: string | null;
    parameters?: Array<Parameter> | null;
    refUnit?: string | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: IImpactCategory): ImpactCategory;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): ImpactCategory | null;
    static fromJson(json: string | Dict): ImpactCategory | null;
    toJson(): string;
}
interface IImpactFactor {
    flow?: Ref | null;
    flowProperty?: Ref | null;
    formula?: string | null;
    location?: Ref | null;
    uncertainty?: Uncertainty | null;
    unit?: Ref | null;
    value?: number | null;
}
export declare class ImpactFactor {
    flow?: Ref | null;
    flowProperty?: Ref | null;
    formula?: string | null;
    location?: Ref | null;
    uncertainty?: Uncertainty | null;
    unit?: Ref | null;
    value?: number | null;
    static of(i: IImpactFactor): ImpactFactor;
    toDict(): Dict;
    static fromDict(d: Dict): ImpactFactor | null;
    static fromJson(json: string | Dict): ImpactFactor | null;
    toJson(): string;
}
interface IImpactMethod {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    description?: string | null;
    impactCategories?: Array<Ref> | null;
    lastChange?: string | null;
    name?: string | null;
    nwSets?: Array<NwSet> | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class ImpactMethod {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    description?: string | null;
    impactCategories?: Array<Ref> | null;
    lastChange?: string | null;
    name?: string | null;
    nwSets?: Array<NwSet> | null;
    source?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: IImpactMethod): ImpactMethod;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): ImpactMethod | null;
    static fromJson(json: string | Dict): ImpactMethod | null;
    toJson(): string;
}
interface IImpactResult {
    amount?: number | null;
    description?: string | null;
    indicator?: Ref | null;
}
export declare class ImpactResult {
    amount?: number | null;
    description?: string | null;
    indicator?: Ref | null;
    static of(i: IImpactResult): ImpactResult;
    toDict(): Dict;
    static fromDict(d: Dict): ImpactResult | null;
    static fromJson(json: string | Dict): ImpactResult | null;
    toJson(): string;
}
interface ILinkingConfig {
    cutoff?: number | null;
    preferUnitProcesses?: boolean | null;
    providerLinking?: ProviderLinking | null;
}
export declare class LinkingConfig {
    cutoff?: number | null;
    preferUnitProcesses?: boolean | null;
    providerLinking?: ProviderLinking | null;
    static of(i: ILinkingConfig): LinkingConfig;
    toDict(): Dict;
    static fromDict(d: Dict): LinkingConfig | null;
    static fromJson(json: string | Dict): LinkingConfig | null;
    toJson(): string;
}
interface ILocation {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    description?: string | null;
    geometry?: Record<string, unknown> | null;
    lastChange?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    name?: string | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class Location {
    id?: string | null;
    category?: string | null;
    code?: string | null;
    description?: string | null;
    geometry?: Record<string, unknown> | null;
    lastChange?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    name?: string | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: ILocation): Location;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Location | null;
    static fromJson(json: string | Dict): Location | null;
    toJson(): string;
}
interface INwFactor {
    impactCategory?: Ref | null;
    normalisationFactor?: number | null;
    weightingFactor?: number | null;
}
export declare class NwFactor {
    impactCategory?: Ref | null;
    normalisationFactor?: number | null;
    weightingFactor?: number | null;
    static of(i: INwFactor): NwFactor;
    toDict(): Dict;
    static fromDict(d: Dict): NwFactor | null;
    static fromJson(json: string | Dict): NwFactor | null;
    toJson(): string;
}
interface INwSet {
    id?: string | null;
    description?: string | null;
    factors?: Array<NwFactor> | null;
    name?: string | null;
    weightedScoreUnit?: string | null;
}
export declare class NwSet {
    id?: string | null;
    description?: string | null;
    factors?: Array<NwFactor> | null;
    name?: string | null;
    weightedScoreUnit?: string | null;
    static of(i: INwSet): NwSet;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): NwSet | null;
    static fromJson(json: string | Dict): NwSet | null;
    toJson(): string;
}
interface IParameter {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    formula?: string | null;
    isInputParameter?: boolean | null;
    lastChange?: string | null;
    name?: string | null;
    parameterScope?: ParameterScope | null;
    tags?: Array<string> | null;
    uncertainty?: Uncertainty | null;
    value?: number | null;
    version?: string | null;
}
export declare class Parameter {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    formula?: string | null;
    isInputParameter?: boolean | null;
    lastChange?: string | null;
    name?: string | null;
    parameterScope?: ParameterScope | null;
    tags?: Array<string> | null;
    uncertainty?: Uncertainty | null;
    value?: number | null;
    version?: string | null;
    static of(i: IParameter): Parameter;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Parameter | null;
    static fromJson(json: string | Dict): Parameter | null;
    toJson(): string;
}
interface IParameterRedef {
    context?: Ref | null;
    description?: string | null;
    isProtected?: boolean | null;
    name?: string | null;
    uncertainty?: Uncertainty | null;
    value?: number | null;
}
export declare class ParameterRedef {
    context?: Ref | null;
    description?: string | null;
    isProtected?: boolean | null;
    name?: string | null;
    uncertainty?: Uncertainty | null;
    value?: number | null;
    static of(i: IParameterRedef): ParameterRedef;
    toDict(): Dict;
    static fromDict(d: Dict): ParameterRedef | null;
    static fromJson(json: string | Dict): ParameterRedef | null;
    toJson(): string;
}
interface IParameterRedefSet {
    description?: string | null;
    isBaseline?: boolean | null;
    name?: string | null;
    parameters?: Array<ParameterRedef> | null;
}
export declare class ParameterRedefSet {
    description?: string | null;
    isBaseline?: boolean | null;
    name?: string | null;
    parameters?: Array<ParameterRedef> | null;
    static of(i: IParameterRedefSet): ParameterRedefSet;
    toDict(): Dict;
    static fromDict(d: Dict): ParameterRedefSet | null;
    static fromJson(json: string | Dict): ParameterRedefSet | null;
    toJson(): string;
}
interface IProcess {
    id?: string | null;
    allocationFactors?: Array<AllocationFactor> | null;
    category?: string | null;
    defaultAllocationMethod?: AllocationType | null;
    description?: string | null;
    dqEntry?: string | null;
    dqSystem?: Ref | null;
    exchangeDqSystem?: Ref | null;
    exchanges?: Array<Exchange> | null;
    isInfrastructureProcess?: boolean | null;
    lastChange?: string | null;
    lastInternalId?: number | null;
    location?: Ref | null;
    name?: string | null;
    parameters?: Array<Parameter> | null;
    processDocumentation?: ProcessDocumentation | null;
    processType?: ProcessType | null;
    socialAspects?: Array<SocialAspect> | null;
    socialDqSystem?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class Process {
    id?: string | null;
    allocationFactors?: Array<AllocationFactor> | null;
    category?: string | null;
    defaultAllocationMethod?: AllocationType | null;
    description?: string | null;
    dqEntry?: string | null;
    dqSystem?: Ref | null;
    exchangeDqSystem?: Ref | null;
    exchanges?: Array<Exchange> | null;
    isInfrastructureProcess?: boolean | null;
    lastChange?: string | null;
    lastInternalId?: number | null;
    location?: Ref | null;
    name?: string | null;
    parameters?: Array<Parameter> | null;
    processDocumentation?: ProcessDocumentation | null;
    processType?: ProcessType | null;
    socialAspects?: Array<SocialAspect> | null;
    socialDqSystem?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: IProcess): Process;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Process | null;
    static fromJson(json: string | Dict): Process | null;
    toJson(): string;
}
interface IProcessDocumentation {
    completenessDescription?: string | null;
    complianceDeclarations?: Array<ComplianceDeclaration> | null;
    creationDate?: string | null;
    dataCollectionDescription?: string | null;
    dataDocumentor?: Ref | null;
    dataGenerator?: Ref | null;
    dataSelectionDescription?: string | null;
    dataSetOwner?: Ref | null;
    dataTreatmentDescription?: string | null;
    flowCompleteness?: Array<AspectValue> | null;
    geographyDescription?: string | null;
    intendedApplication?: string | null;
    inventoryMethodDescription?: string | null;
    isCopyrightProtected?: boolean | null;
    modelingConstantsDescription?: string | null;
    projectDescription?: string | null;
    publication?: Ref | null;
    restrictionsDescription?: string | null;
    reviews?: Array<Review> | null;
    samplingDescription?: string | null;
    sources?: Array<Ref> | null;
    technologyDescription?: string | null;
    timeDescription?: string | null;
    useAdvice?: string | null;
    validFrom?: string | null;
    validUntil?: string | null;
}
export declare class ProcessDocumentation {
    completenessDescription?: string | null;
    complianceDeclarations?: Array<ComplianceDeclaration> | null;
    creationDate?: string | null;
    dataCollectionDescription?: string | null;
    dataDocumentor?: Ref | null;
    dataGenerator?: Ref | null;
    dataSelectionDescription?: string | null;
    dataSetOwner?: Ref | null;
    dataTreatmentDescription?: string | null;
    flowCompleteness?: Array<AspectValue> | null;
    geographyDescription?: string | null;
    intendedApplication?: string | null;
    inventoryMethodDescription?: string | null;
    isCopyrightProtected?: boolean | null;
    modelingConstantsDescription?: string | null;
    projectDescription?: string | null;
    publication?: Ref | null;
    restrictionsDescription?: string | null;
    reviews?: Array<Review> | null;
    samplingDescription?: string | null;
    sources?: Array<Ref> | null;
    technologyDescription?: string | null;
    timeDescription?: string | null;
    useAdvice?: string | null;
    validFrom?: string | null;
    validUntil?: string | null;
    static of(i: IProcessDocumentation): ProcessDocumentation;
    toDict(): Dict;
    static fromDict(d: Dict): ProcessDocumentation | null;
    static fromJson(json: string | Dict): ProcessDocumentation | null;
    toJson(): string;
}
interface IProcessLink {
    exchange?: ExchangeRef | null;
    flow?: Ref | null;
    process?: Ref | null;
    provider?: Ref | null;
}
export declare class ProcessLink {
    exchange?: ExchangeRef | null;
    flow?: Ref | null;
    process?: Ref | null;
    provider?: Ref | null;
    static of(i: IProcessLink): ProcessLink;
    toDict(): Dict;
    static fromDict(d: Dict): ProcessLink | null;
    static fromJson(json: string | Dict): ProcessLink | null;
    toJson(): string;
}
interface IProductSystem {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    lastChange?: string | null;
    name?: string | null;
    parameterSets?: Array<ParameterRedefSet> | null;
    processLinks?: Array<ProcessLink> | null;
    processes?: Array<Ref> | null;
    refExchange?: ExchangeRef | null;
    refProcess?: Ref | null;
    tags?: Array<string> | null;
    targetAmount?: number | null;
    targetFlowProperty?: Ref | null;
    targetUnit?: Ref | null;
    version?: string | null;
}
export declare class ProductSystem {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    lastChange?: string | null;
    name?: string | null;
    parameterSets?: Array<ParameterRedefSet> | null;
    processLinks?: Array<ProcessLink> | null;
    processes?: Array<Ref> | null;
    refExchange?: ExchangeRef | null;
    refProcess?: Ref | null;
    tags?: Array<string> | null;
    targetAmount?: number | null;
    targetFlowProperty?: Ref | null;
    targetUnit?: Ref | null;
    version?: string | null;
    static of(i: IProductSystem): ProductSystem;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): ProductSystem | null;
    static fromJson(json: string | Dict): ProductSystem | null;
    toJson(): string;
}
interface IProject {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    impactMethod?: Ref | null;
    isWithCosts?: boolean | null;
    isWithRegionalization?: boolean | null;
    lastChange?: string | null;
    name?: string | null;
    nwSet?: NwSet | null;
    tags?: Array<string> | null;
    variants?: Array<ProjectVariant> | null;
    version?: string | null;
}
export declare class Project {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    impactMethod?: Ref | null;
    isWithCosts?: boolean | null;
    isWithRegionalization?: boolean | null;
    lastChange?: string | null;
    name?: string | null;
    nwSet?: NwSet | null;
    tags?: Array<string> | null;
    variants?: Array<ProjectVariant> | null;
    version?: string | null;
    static of(i: IProject): Project;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Project | null;
    static fromJson(json: string | Dict): Project | null;
    toJson(): string;
}
interface IProjectVariant {
    allocationMethod?: AllocationType | null;
    amount?: number | null;
    description?: string | null;
    isDisabled?: boolean | null;
    name?: string | null;
    parameterRedefs?: Array<ParameterRedef> | null;
    productSystem?: Ref | null;
    unit?: Ref | null;
}
export declare class ProjectVariant {
    allocationMethod?: AllocationType | null;
    amount?: number | null;
    description?: string | null;
    isDisabled?: boolean | null;
    name?: string | null;
    parameterRedefs?: Array<ParameterRedef> | null;
    productSystem?: Ref | null;
    unit?: Ref | null;
    static of(i: IProjectVariant): ProjectVariant;
    toDict(): Dict;
    static fromDict(d: Dict): ProjectVariant | null;
    static fromJson(json: string | Dict): ProjectVariant | null;
    toJson(): string;
}
interface IRef {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    flowType?: FlowType | null;
    location?: string | null;
    name?: string | null;
    processType?: ProcessType | null;
    refUnit?: string | null;
    refType?: RefType | null;
}
export declare class Ref {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    flowType?: FlowType | null;
    location?: string | null;
    name?: string | null;
    processType?: ProcessType | null;
    refUnit?: string | null;
    refType?: RefType | null;
    static of(i: IRef): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Ref | null;
    static fromJson(json: string | Dict): Ref | null;
    toJson(): string;
}
interface IResult {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    flowResults?: Array<FlowResult> | null;
    impactMethod?: Ref | null;
    impactResults?: Array<ImpactResult> | null;
    lastChange?: string | null;
    name?: string | null;
    productSystem?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
}
export declare class Result {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    flowResults?: Array<FlowResult> | null;
    impactMethod?: Ref | null;
    impactResults?: Array<ImpactResult> | null;
    lastChange?: string | null;
    name?: string | null;
    productSystem?: Ref | null;
    tags?: Array<string> | null;
    version?: string | null;
    static of(i: IResult): Result;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Result | null;
    static fromJson(json: string | Dict): Result | null;
    toJson(): string;
}
interface IReview {
    assessment?: Array<AspectValue> | null;
    details?: string | null;
    report?: Ref | null;
    reviewType?: string | null;
    reviewers?: Array<Ref> | null;
    scopes?: Array<ReviewScope> | null;
}
export declare class Review {
    assessment?: Array<AspectValue> | null;
    details?: string | null;
    report?: Ref | null;
    reviewType?: string | null;
    reviewers?: Array<Ref> | null;
    scopes?: Array<ReviewScope> | null;
    static of(i: IReview): Review;
    toDict(): Dict;
    static fromDict(d: Dict): Review | null;
    static fromJson(json: string | Dict): Review | null;
    toJson(): string;
}
interface IReviewScope {
    methods?: Array<string> | null;
    name?: string | null;
}
export declare class ReviewScope {
    methods?: Array<string> | null;
    name?: string | null;
    static of(i: IReviewScope): ReviewScope;
    toDict(): Dict;
    static fromDict(d: Dict): ReviewScope | null;
    static fromJson(json: string | Dict): ReviewScope | null;
    toJson(): string;
}
interface ISocialAspect {
    activityValue?: number | null;
    comment?: string | null;
    quality?: string | null;
    rawAmount?: string | null;
    riskLevel?: RiskLevel | null;
    socialIndicator?: Ref | null;
    source?: Ref | null;
}
export declare class SocialAspect {
    activityValue?: number | null;
    comment?: string | null;
    quality?: string | null;
    rawAmount?: string | null;
    riskLevel?: RiskLevel | null;
    socialIndicator?: Ref | null;
    source?: Ref | null;
    static of(i: ISocialAspect): SocialAspect;
    toDict(): Dict;
    static fromDict(d: Dict): SocialAspect | null;
    static fromJson(json: string | Dict): SocialAspect | null;
    toJson(): string;
}
interface ISocialIndicator {
    id?: string | null;
    activityQuantity?: Ref | null;
    activityUnit?: Ref | null;
    activityVariable?: string | null;
    category?: string | null;
    description?: string | null;
    evaluationScheme?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    unitOfMeasurement?: string | null;
    version?: string | null;
}
export declare class SocialIndicator {
    id?: string | null;
    activityQuantity?: Ref | null;
    activityUnit?: Ref | null;
    activityVariable?: string | null;
    category?: string | null;
    description?: string | null;
    evaluationScheme?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    unitOfMeasurement?: string | null;
    version?: string | null;
    static of(i: ISocialIndicator): SocialIndicator;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): SocialIndicator | null;
    static fromJson(json: string | Dict): SocialIndicator | null;
    toJson(): string;
}
interface ISource {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    externalFile?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    textReference?: string | null;
    url?: string | null;
    version?: string | null;
    year?: number | null;
}
export declare class Source {
    id?: string | null;
    category?: string | null;
    description?: string | null;
    externalFile?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    textReference?: string | null;
    url?: string | null;
    version?: string | null;
    year?: number | null;
    static of(i: ISource): Source;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Source | null;
    static fromJson(json: string | Dict): Source | null;
    toJson(): string;
}
interface IUncertainty {
    distributionType?: UncertaintyType | null;
    geomMean?: number | null;
    geomSd?: number | null;
    maximum?: number | null;
    mean?: number | null;
    minimum?: number | null;
    mode?: number | null;
    sd?: number | null;
}
export declare class Uncertainty {
    distributionType?: UncertaintyType | null;
    geomMean?: number | null;
    geomSd?: number | null;
    maximum?: number | null;
    mean?: number | null;
    minimum?: number | null;
    mode?: number | null;
    sd?: number | null;
    static of(i: IUncertainty): Uncertainty;
    toDict(): Dict;
    static fromDict(d: Dict): Uncertainty | null;
    static fromJson(json: string | Dict): Uncertainty | null;
    toJson(): string;
}
interface IUnit {
    id?: string | null;
    conversionFactor?: number | null;
    description?: string | null;
    isRefUnit?: boolean | null;
    name?: string | null;
    synonyms?: Array<string> | null;
}
export declare class Unit {
    id?: string | null;
    conversionFactor?: number | null;
    description?: string | null;
    isRefUnit?: boolean | null;
    name?: string | null;
    synonyms?: Array<string> | null;
    static of(i: IUnit): Unit;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): Unit | null;
    static fromJson(json: string | Dict): Unit | null;
    toJson(): string;
}
interface IUnitGroup {
    id?: string | null;
    category?: string | null;
    defaultFlowProperty?: Ref | null;
    description?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    units?: Array<Unit> | null;
    version?: string | null;
}
export declare class UnitGroup {
    id?: string | null;
    category?: string | null;
    defaultFlowProperty?: Ref | null;
    description?: string | null;
    lastChange?: string | null;
    name?: string | null;
    tags?: Array<string> | null;
    units?: Array<Unit> | null;
    version?: string | null;
    static of(i: IUnitGroup): UnitGroup;
    toRef(): Ref;
    toDict(): Dict;
    static fromDict(d: Dict): UnitGroup | null;
    static fromJson(json: string | Dict): UnitGroup | null;
    toJson(): string;
}
interface ICalculationSetup {
    allocation?: AllocationType | null;
    amount?: number | null;
    flowProperty?: Ref | null;
    impactMethod?: Ref | null;
    nwSet?: Ref | null;
    parameters?: Array<ParameterRedef> | null;
    target?: Ref | null;
    unit?: Ref | null;
    withCosts?: boolean | null;
    withRegionalization?: boolean | null;
}
export declare class CalculationSetup {
    allocation?: AllocationType | null;
    amount?: number | null;
    flowProperty?: Ref | null;
    impactMethod?: Ref | null;
    nwSet?: Ref | null;
    parameters?: Array<ParameterRedef> | null;
    target?: Ref | null;
    unit?: Ref | null;
    withCosts?: boolean | null;
    withRegionalization?: boolean | null;
    static of(i: ICalculationSetup): CalculationSetup;
    toDict(): Dict;
    static fromDict(d: Dict): CalculationSetup | null;
    static fromJson(json: string | Dict): CalculationSetup | null;
    toJson(): string;
}
interface ICostValue {
    amount?: number | null;
    currency?: Ref | null;
}
export declare class CostValue {
    amount?: number | null;
    currency?: Ref | null;
    static of(i: ICostValue): CostValue;
    toDict(): Dict;
    static fromDict(d: Dict): CostValue | null;
    static fromJson(json: string | Dict): CostValue | null;
    toJson(): string;
}
interface IEnviFlow {
    flow?: Ref | null;
    isInput?: boolean | null;
    location?: Ref | null;
}
export declare class EnviFlow {
    flow?: Ref | null;
    isInput?: boolean | null;
    location?: Ref | null;
    static of(i: IEnviFlow): EnviFlow;
    toDict(): Dict;
    static fromDict(d: Dict): EnviFlow | null;
    static fromJson(json: string | Dict): EnviFlow | null;
    toJson(): string;
}
interface IEnviFlowValue {
    amount?: number | null;
    enviFlow?: EnviFlow | null;
}
export declare class EnviFlowValue {
    amount?: number | null;
    enviFlow?: EnviFlow | null;
    static of(i: IEnviFlowValue): EnviFlowValue;
    toDict(): Dict;
    static fromDict(d: Dict): EnviFlowValue | null;
    static fromJson(json: string | Dict): EnviFlowValue | null;
    toJson(): string;
}
interface IImpactValue {
    amount?: number | null;
    impactCategory?: Ref | null;
}
export declare class ImpactValue {
    amount?: number | null;
    impactCategory?: Ref | null;
    static of(i: IImpactValue): ImpactValue;
    toDict(): Dict;
    static fromDict(d: Dict): ImpactValue | null;
    static fromJson(json: string | Dict): ImpactValue | null;
    toJson(): string;
}
interface IResultState {
    id?: string | null;
    error?: string | null;
    isReady?: boolean | null;
    isScheduled?: boolean | null;
    time?: number | null;
}
export declare class ResultState {
    id?: string | null;
    error?: string | null;
    isReady?: boolean | null;
    isScheduled?: boolean | null;
    time?: number | null;
    static of(i: IResultState): ResultState;
    toDict(): Dict;
    static fromDict(d: Dict): ResultState | null;
    static fromJson(json: string | Dict): ResultState | null;
    toJson(): string;
}
interface ISankeyEdge {
    nodeIndex?: number | null;
    providerIndex?: number | null;
    upstreamShare?: number | null;
}
export declare class SankeyEdge {
    nodeIndex?: number | null;
    providerIndex?: number | null;
    upstreamShare?: number | null;
    static of(i: ISankeyEdge): SankeyEdge;
    toDict(): Dict;
    static fromDict(d: Dict): SankeyEdge | null;
    static fromJson(json: string | Dict): SankeyEdge | null;
    toJson(): string;
}
interface ISankeyGraph {
    edges?: Array<SankeyEdge> | null;
    nodes?: Array<SankeyNode> | null;
    rootIndex?: number | null;
}
export declare class SankeyGraph {
    edges?: Array<SankeyEdge> | null;
    nodes?: Array<SankeyNode> | null;
    rootIndex?: number | null;
    static of(i: ISankeyGraph): SankeyGraph;
    toDict(): Dict;
    static fromDict(d: Dict): SankeyGraph | null;
    static fromJson(json: string | Dict): SankeyGraph | null;
    toJson(): string;
}
interface ISankeyNode {
    directResult?: number | null;
    index?: number | null;
    techFlow?: TechFlow | null;
    totalResult?: number | null;
}
export declare class SankeyNode {
    directResult?: number | null;
    index?: number | null;
    techFlow?: TechFlow | null;
    totalResult?: number | null;
    static of(i: ISankeyNode): SankeyNode;
    toDict(): Dict;
    static fromDict(d: Dict): SankeyNode | null;
    static fromJson(json: string | Dict): SankeyNode | null;
    toJson(): string;
}
interface ISankeyRequest {
    enviFlow?: EnviFlow | null;
    forCosts?: boolean | null;
    impactCategory?: Ref | null;
    maxNodes?: number | null;
    minShare?: number | null;
}
export declare class SankeyRequest {
    enviFlow?: EnviFlow | null;
    forCosts?: boolean | null;
    impactCategory?: Ref | null;
    maxNodes?: number | null;
    minShare?: number | null;
    static of(i: ISankeyRequest): SankeyRequest;
    toDict(): Dict;
    static fromDict(d: Dict): SankeyRequest | null;
    static fromJson(json: string | Dict): SankeyRequest | null;
    toJson(): string;
}
interface ITechFlow {
    flow?: Ref | null;
    provider?: Ref | null;
}
export declare class TechFlow {
    flow?: Ref | null;
    provider?: Ref | null;
    static of(i: ITechFlow): TechFlow;
    toDict(): Dict;
    static fromDict(d: Dict): TechFlow | null;
    static fromJson(json: string | Dict): TechFlow | null;
    toJson(): string;
}
interface ITechFlowValue {
    amount?: number | null;
    techFlow?: TechFlow | null;
}
export declare class TechFlowValue {
    amount?: number | null;
    techFlow?: TechFlow | null;
    static of(i: ITechFlowValue): TechFlowValue;
    toDict(): Dict;
    static fromDict(d: Dict): TechFlowValue | null;
    static fromJson(json: string | Dict): TechFlowValue | null;
    toJson(): string;
}
interface IUpstreamNode {
    directContribution?: number | null;
    requiredAmount?: number | null;
    result?: number | null;
    techFlow?: TechFlow | null;
}
export declare class UpstreamNode {
    directContribution?: number | null;
    requiredAmount?: number | null;
    result?: number | null;
    techFlow?: TechFlow | null;
    static of(i: IUpstreamNode): UpstreamNode;
    toDict(): Dict;
    static fromDict(d: Dict): UpstreamNode | null;
    static fromJson(json: string | Dict): UpstreamNode | null;
    toJson(): string;
}
export {};
